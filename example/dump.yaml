name: playground
kind: Namespace
---
name: news
namespace: playground
kind: Collection
---
name: bbc
kind: XmlEndpoint
namespace: playground
collection: news
data:
  storage:
    kind: StreamStorage
  resource:
    root_name: data
    node_name: item
    pretty: true
    preserve_whitespace: false
  type: source
  options:
    flush: false
    import:
      - guid
    filter_one: null
    filter_all: null
  file: 'http://feeds.bbci.co.uk/news/rss.xml'
---
name: hourly-import
kind: Job
namespace: playground
data:
  notification:
    enabled: false
    receiver: []
  collections:
    - 'news'
  endpoints:
    - 'bbc'
  filter: []
  simulate: false
  log_level: debug
  ignore: true
  options:
    at: 0
    interval: 3600
    interval_reference: end
    retry: 0
    retry_interval: 0
    timeout: 0
---
name: create
kind: Workflow
namespace: playground
collection: news
endpoint: bbc
data:
  ensure: exists
  map:
    - name: data.title
      from: title
      required: true
    - name: data.description
      from: description
    - name: data.date
      from: pubDate
    - name: data.guid
      from: guid._value
  condition: null
---
name: xml-export
kind: XmlEndpoint
namespace: playground
collection: news
data:
  storage:
    kind: StreamStorage
  resource:
    root_name: data
    node_name: article
    pretty: true
    preserve_whitespace: false
  type: destination
  options:
    flush: false
    import:
      - guid
    filter_one: '{\"guid\":\"{data.guid}\"}'
    filter_all: null
  file: /tmp/news.xml
---
name: create-update
kind: Workflow
namespace: playground
collection: news
endpoint: xml-export
data:
  ensure: exists
  map:
    - name: title
      from: data.title
      required: true
    - name: description
      from: data.description
    - name: date
      from: data.date
    - name: guid
      from: data.guid
  condition: null
---
name: accounts
namespace: playground
kind: Collection
data:
  schema:
    username:
      label: Username
      type: string
      require_regex: '#[a-zA-Z0-1]+#'
    firstname:
      label: Firstname
      type: string
    lastname:
      label: Surname
      type: string
    disabled:
      label: Surname
      type: int
    mail:
      label: Mail adress
      type: string
      require_regex: '#[a-zA-z0-9.-]+\@[a-zA-z0-9.-]+.[a-zA-Z]+#'
---
kind: DataObject
namespace: playground
collection: accounts
name: user1
data:
  username: user1
  mail: user1@example.org
  firstname: user1
  lastname: foo
  disabled: 1547036962
---
kind: DataObject
namespace: playground
collection: accounts
name: user2
data:
  username: user2
  mail: user2@example.org
  firstname: user2
  lastname: bar
---
name: groups
namespace: playground
kind: Collection
---
kind: DataObject
namespace: playground
collection: groups
name: group1
data:
  name: group1
  disabled: null
---
kind: DataObject
namespace: playground
collection: groups
name: group2
data:
  name: group2
  disabled: null
---
kind: DataObjectRelation
namespace: playground
name: user1-group2
data:
  relation:
  - namespace: playground
    collection: accounts
    object: user1
  - namespace: playground
    collection: groups
    object: group1
  context:
    foo: bar
---
kind: DataObjectRelation
namespace: playground
name: user2-group2
data:
  relation:
  - namespace: playground
    collection: accounts
    object: user2
  - namespace: playground
    collection: groups
    object: group2
  context:
    foo: foo
---
kind: DataObjectRelation
namespace: playground
name: user1-group1
data:
  relation:
  - namespace: playground
    collection: accounts
    object: user1
  - namespace: playground
    collection: groups
    object: group1
  context:
    foo: foofoo
---
name: balloon
kind: Secret
namespace: playground
data:
  username: YWRtaW4=
  password: YWRtaW4=
---
name: balloon
kind: BalloonEndpoint
namespace: playground
collection: accounts
data:
  resource:
    request_options:
      verify: false
    auth: basic
    basic:
      username: admin
      password: admin
    base_uri: 'https://balloon-endpoint/api/v2/users'
  type: destination
  options:
    flush: false
    import:
      - id
    filter_one: '{\"_id\": \"{endpoints.balloon.result}\"}'
    filter_all: null
secrets:
- secret: balloon
  key: username
  to: 'data.resource.basic.username'
- secret: balloon
  key: password
  to: 'data.resource.basic.password'
---
name: one-time-export
kind: Process
namespace: playground
data:
  notification:
    enabled: false
    receiver: []
  collections:
    - 'accounts'
  endpoints:
    - 'json-export'
  filter: []
  simulate: false
  log_level: info
  ignore: true
---
name: create-update
kind: Workflow
namespace: playground
collection: accounts
endpoint: balloon
data:
  ensure: last
  map:
    - name: hard_quota
      value: 4999999999999999
    - name: username
      from: data.username
      required: true
  condition: null
---
name: json-export
kind: JsonEndpoint
namespace: playground
collection: accounts
data:
  storage:
    kind: StreamStorage
  type: destination
  options:
    flush: true
    import: []
    filter_one: test
    filter_all: null
  file: /tmp/accounts.json
---
name: create-update
kind: Workflow
namespace: playground
collection: accounts
endpoint: json-export
data:
  ensure: last
  map:
    - name: hard_quota
      value: 10
    - name: username
      from: data.username
      required: true
  condition: null
---
name: ucs
kind: UcsEndpoint
namespace: playground
collection: accounts
data:
  resource:
    request_options:
      verify: false
    base_uri: 'http://ucs-endpoint/univention'
    flavor: users/user
  type: destination
  options:
    flush: false
    filter_one: '{\"name\":\"{username}\"}'
    filter_all: null
secrets:
- secret: ucs
  key: username
  to: 'data.resource.auth.username'
- secret: ucs
  key: password
  to: 'data.resource.auth.password'
---
name: create
kind: Workflow
namespace: playground
collection: accounts
endpoint: ucs
data:
  priority: 1
  ensure: exists
  map:
    - name: "$dn$"
      script: "core.result('cn='+core.object.data.name+',cn=users,dc=foobar,dc=intranet')"
      required: true
    - name: username
      from: data.username
      required: true
    - name: lastname
      from: data.firstname
      required: true
    - name: description
      value: "bar bar"
    - name: password
      value: admin1234
  condition: "core.result(core.object.data.disabled === false)"
---
name: update
kind: Workflow
namespace: playground
collection: accounts
endpoint: ucs
data:
  priority: 2
  ensure: last
  map:
    - name: "$dn$"
      script: "core.result('cn='+core.object.data.name+',cn=users,dc=foobar,dc=intranet')"
      required: true
    - name: username
      from: data.username
      required: true
    - name: lastname
      from: data.firstname
      required: true
    - name: description
      value: "foo foo"
  condition: "core.result(core.object.data.disabled === false)"
---
name: disable
kind: Workflow
namespace: playground
collection: accounts
endpoint: ucs
data:
  priority: 4
  ensure: last
  map:
    - name: "$dn$"
      script: "core.result('cn='+core.object.data.name+',cn=users,dc=foobar,dc=intranet')"
      required: true
    - name: username
      from: data.username
      required: true
    - name: lastname
      from: data.firstname
      required: true
    - name: description
      value: "This user is disabled"
  condition: "core.result(core.object.data.disabled === true && (Date.now() / 1000 | 0) >= core.object.endpoints.im-mssql.last_sync.toDateTime().format('U') + 3600)"
---
name: remove
kind: Workflow
namespace: playground
collection: accounts
endpoint: ucs
data:
  priority: 3
  ensure: absent
  map:
    - name: username
      from: data.username
      required: true
  condition: "core.result(core.object.data.disabled === true && (Date.now() / 1000 | 0) >= core.object.endpoints.im-mssql.last_sync.toDateTime().format('U') + 6900)"
---
name: hourly-account-export
kind: Job
namespace: playground
data:
  notification:
    enabled: false
    receiver: []
  collections:
    - 'accounts'
  endpoints:
    - 'ucs'
  filter: []
  simulate: false
  log_level: debug
  ignore: true
  options:
    at: 0
    interval: 3600
    interval_reference: end
    retry: 0
    retry_interval: 0
    timeout: 0
---
name: ucs
kind: UcsEndpoint
namespace: playground
collection: groups
data:
  resource:
    request_options:
      verify: false
    base_uri: 'http://ucs-endpoint/univention'
    flavor: groups/group
  type: destination
  options:
    flush: false
    filter_one: '{\"name\":\"{name}\"}'
    filter_all: null
secrets:
- secret: ucs
  key: username
  to: 'data.resource.auth.username'
- secret: ucs
  key: password
  to: 'data.resource.auth.password'
---
kind: Secret
name: ucs
namespace: playground
data:
  username: QWRtaW5pc3RyYXRvcg==
  password: YWRtaW4xMjM0
---
name: create-update
kind: Workflow
namespace: playground
collection: groups
endpoint: ucs
data:
  priority: 3
  ensure: last
  map:
    - name: "$dn$"
      script: "core.result('cn='+core.object.data.name+',cn=users,dc=foobar,dc=intranet')"
      required: true
    - name: name
      from: data.name
      required: true
    - name: users
      from: relations
      unwind:
        from: root.object.endpoints.ucs.result
    - name: description
      value: "foobar"
  condition: "core.result(core.object.data.disabled === false)"
---
name: remove
kind: Workflow
namespace: playground
collection: groups
endpoint: ucs
data:
  priority: 1
  ensure: absent
  map:
    - name: name
      from: data.name
      required: true
  condition: "core.result(core.object.data.disabled === true && (Date.now() / 1000 | 0) >= core.object.endpoints.im-mssql.last_sync.toDateTime().format('U') + 3600)"
