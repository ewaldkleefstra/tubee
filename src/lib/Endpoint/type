AbstractEndpoint.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
AbstractEndpoint.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
AbstractEndpoint.php:        $this->name = $name;
AbstractEndpoint.php:        $this->type = $type;
AbstractEndpoint.php:        $this->resource = $resource;
AbstractEndpoint.php:        $this->datatype = $datatype;
AbstractEndpoint.php:        $this->logger = $logger;
AbstractEndpoint.php:        $this->setOptions($config);
AbstractEndpoint.php:        if ($this->type === EndpointInterface::TYPE_SOURCE && count($this->import) === 0) {
AbstractEndpoint.php:        /*if (is_iterable($this->filter_one) && count($this->filter_one) === 0) {
AbstractEndpoint.php:                    $this->flush = (bool) (int) $value;
AbstractEndpoint.php:                    $this->import = (array) $value;
AbstractEndpoint.php:                        $this->filter_all = $value['all'];
AbstractEndpoint.php:                        $this->filter_one = $value['one'];
AbstractEndpoint.php:                    $this->history = (bool) $value;
AbstractEndpoint.php:                'self' => ['href' => (string) $request->getUri()],
AbstractEndpoint.php:            'name' => $this->name,
AbstractEndpoint.php:            'type' => $this->type,
AbstractEndpoint.php:            'flush' => $this->flush,
AbstractEndpoint.php:            'history' => $this->history,
AbstractEndpoint.php:            'import' => $this->import,
AbstractEndpoint.php:            'filter_all' => $this->filter_all,
AbstractEndpoint.php:            'filter_one' => $this->filter_one,
AbstractEndpoint.php:        return $this->flush;
AbstractEndpoint.php:        return $this->datatype;
AbstractEndpoint.php:        return $this->import;
AbstractEndpoint.php:        return $this->history;
AbstractEndpoint.php:            $this->getOne($object, []);
AbstractEndpoint.php:        return isset($this->workflows[$name]);
AbstractEndpoint.php:        $this->logger->debug('inject workflow ['.$name.'] of type ['.get_class($workflow).']', [
AbstractEndpoint.php:        if ($this->hasWorkflow($name)) {
AbstractEndpoint.php:        $this->workflows[$name] = $workflow;
AbstractEndpoint.php:        if (!isset($this->workflows[$name])) {
AbstractEndpoint.php:            throw new Exception\WorkflowNotFound('workflow '.$name.' is not registered in endpoint '.$this->name);
AbstractEndpoint.php:        return $this->workflows[$name];
AbstractEndpoint.php:            return $this->workflows;
AbstractEndpoint.php:            if (!isset($this->workflows[$name])) {
AbstractEndpoint.php:                throw new Exception\WorkflowNotFound('workflow '.$name.' is not registered in endpoint '.$this->name);
AbstractEndpoint.php:            $list[$name] = $this->workflows[$name];
AbstractEndpoint.php:        return $this->type;
AbstractEndpoint.php:        return $this->datatype->getIdentifier().'::'.$this->name;
AbstractEndpoint.php:        return $this->name;
AbstractEndpoint.php:        if (is_iterable($this->filter_one)) {
AbstractEndpoint.php:            foreach ($this->filter_one as $key => $attr) {
AbstractEndpoint.php:                $filter[$key] = $this->parseAttribute($attr, $object);
AbstractEndpoint.php:        return $this->parseAttribute($this->filter_one, $object);
AbstractEndpoint.php:        return $this->filter_all;
AbstractFile.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
AbstractFile.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
AbstractFile.php:        $this->storage = $storage;
AbstractFile.php:        $this->file = $file;
AbstractFile.php:        $this->logger->info('flush file ['.$this->file.'] from endpoint ['.$this->name.']', [
AbstractFile.php:        foreach ($this->resource as $stream) {
AbstractFile.php:                throw new Exception\WriteOperationFailed('failed flush file '.$this->file);
AbstractSqlDatabase.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
AbstractSqlDatabase.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
AbstractSqlDatabase.php:        $this->logger->info('flush table ['.$this->table.'] from endpoint ['.$this->name.']', [
AbstractSqlDatabase.php:        $this->resource->query('TRUNCATE `'.$this->table.'`;');
AbstractSqlDatabase.php:        $filter = $this->getFilterOne($object);
AbstractSqlDatabase.php:        $query = 'UPDATE '.$this->table.' SET '.implode(',', $diff).' WHERE '.$filter;
AbstractSqlDatabase.php:            $this->resource->prepare($query, $values);
AbstractSqlDatabase.php:        $filter = $this->getFilterOne($object);
AbstractSqlDatabase.php:        $sql = 'DELETE FROM '.$this->table.' WHERE '.$filter;
AbstractSqlDatabase.php:            $this->resource->query($sql);
AbstractSqlDatabase.php:        $sql = 'INSERT INTO '.$this->table.' ('.implode(',', $columns).') VALUES ('.implode(',', $repl).')';
AbstractSqlDatabase.php:            return $this->resource->prepare($sql, $values);
AbstractSqlDatabase.php:        $filter = $this->buildFilter($filter);
AbstractSqlDatabase.php:        $all = $this->buildFilter($this->filter_all);
Balloon/ApiClient.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Balloon/ApiClient.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Balloon/ApiClient.php:        $this->setOptions($config);
Balloon/ApiClient.php:        $this->logger = $logger;
Balloon/ApiClient.php:                    $this->uri = (string) $value;
Balloon/ApiClient.php:                    $this->username = (string) $value;
Balloon/ApiClient.php:                    $this->password = (string) $value;
Balloon/ApiClient.php:                        $this->curl_options[$name] = $opt['value'];
Balloon/ApiClient.php:                'header' => "Content-Type: application/json\r\n".
Balloon/ApiClient.php:                          'Authorization: Basic '.base64_encode($this->username.':'.$this->password)."\r\n",
Balloon/ApiClient.php:        $url = $this->uri.$url.'?'.urlencode($params);
Balloon/ApiClient.php:        $this->logger->info('open socket for ['.$url.']', [
Balloon/ApiClient.php:        $url = $this->uri.$url;
Balloon/ApiClient.php:        $this->logger->info('execute curl request ['.$url.']', [
Balloon/ApiClient.php:            'Content-Type: application/json',
Balloon/ApiClient.php:        curl_setopt($ch, CURLOPT_USERPWD, "$this->username:$this->password");
Balloon/ApiClient.php:        foreach ($this->curl_options as $opt => $value) {
Balloon/ApiClient.php:                $this->logger->error('failed process balloon request ['.$result.']', [
Balloon/Exception/InvalidApiResponse.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Balloon/Exception/InvalidApiResponse.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Balloon/Exception/NoResourceId.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Balloon/Exception/NoResourceId.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Balloon/Exception/FailedProcessRequest.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Balloon/Exception/FailedProcessRequest.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Csv.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Csv.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Csv.php:            $this->flush = true;
Csv.php:        $this->setCsvOptions($csv_options);
Csv.php:        if ($this->type === EndpointInterface::TYPE_DESTINATION) {
Csv.php:            $streams = [$this->file => $this->storage->openWriteStream($this->file)];
Csv.php:            $streams = $this->storage->openReadStreams($this->file);
Csv.php:            if ($data = fgetcsv($stream, 0, $this->delimiter, $this->enclosure, $this->escape)) {
Csv.php:                $this->logger->debug('use first line in csv as header [{line}]', [
Csv.php:                $level = ($this->type === EndpointInterface::TYPE_SOURCE ? 'warning' : 'debug');
Csv.php:                $this->logger->$level('empty csv file ['.$path.']', [
Csv.php:            $this->resource[] = [
Csv.php:                    $this->{$option} = (string) $value;
Csv.php:        foreach ($this->resource as $csv) {
Csv.php:            if ($simulate === false && $this->type === EndpointInterface::TYPE_DESTINATION) {
Csv.php:                $this->storage->syncWriteStream($csv['resource'], $this->file);
Csv.php:        $filter = $this->getFilterOne($object);
Csv.php:        foreach ($this->getAll($filter) as $object) {
Csv.php:        $filter = array_merge((array) $this->filter_all, (array) $filter);
Csv.php:        foreach ($this->resource as $csv) {
Csv.php:            while (($line = fgetcsv($csv['resource'], 0, $this->delimiter, $this->enclosure, $this->escape)) !== false) {
Csv.php:                $this->logger->debug('parse csv line [{line}]', [
Csv.php:                        $this->logger->debug('line does not match filter [{filter}], skip it', [
Csv.php:        if ($this->resource[0]['header'] === false) {
Csv.php:            $this->resource[0]['header'] = $map->getAttributes();
Csv.php:            $this->create($map, $this->resource[0]['header'], $simulate);
Csv.php:        if (fputcsv($this->resource[0]['resource'], $object, $this->delimiter, $this->enclosure, $this->escape) === false) {
Csv.php:            throw new Exception\WriteOperationFailed('failed append object to csv file '.$this->file);
EndpointInterface.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
EndpointInterface.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/AttributeNotResolvable.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/AttributeNotResolvable.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/ObjectNotFound.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/ObjectNotFound.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/NotUnique.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/NotUnique.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/ObjectMultipleFound.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/ObjectMultipleFound.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/NotFound.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/NotFound.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/EndpointCanNotHandleArray.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/EndpointCanNotHandleArray.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/SourceEndpointNoImportCondition.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/SourceEndpointNoImportCondition.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/UnsupportedEndpointOperation.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/UnsupportedEndpointOperation.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/FilterOneRequired.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/FilterOneRequired.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Exception/WriteOperationFailed.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Exception/WriteOperationFailed.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Factory.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Factory.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Factory.php:        $this->db = $db;
Factory.php:        $this->logger = $logger;
Factory.php:        return $this->db->endpoints->count([
Factory.php:            'mandator' => $datatype->getMandator()->getName(),
Factory.php:            'datatype' => $datatype->getName(),
Factory.php:        $result = $this->db->endpoints->find([
Factory.php:            'mandator' => $datatype->getMandator()->getName(),
Factory.php:            'datatype' => $datatype->getName(),
Factory.php:        return $this->db->endpoints->count((array) $query);
Factory.php:        $result = $this->db->endpoints->findOne([
Factory.php:            'mandator' => $datatype->getMandator()->getName(),
Factory.php:            'datatype' => $datatype->getName(),
Factory.php:        $this->db->endpoints->deleteOne([
Factory.php:            'mandator' => $datatype->getMandator()->getName(),
Factory.php:            'datatype' => $datatype->getName(),
Factory.php:        if ($this->has($datatype, $resource['name'])) {
Factory.php:        $resource['mandator'] = $datatype->getMandator()->getName();
Factory.php:        $resource['datatype'] = $datatype->getName();
Factory.php:        $result = $this->db->endpoints->insertOne($resource);
Factory.php:        return $result->getInsertedId();
Image.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Image.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Image.php:        $this->setImageOptions($image_options);
Image.php:                    $this->format = (string) $value;
Image.php:                    $this->{$option} = (int) $value;
Image.php:        foreach ($this->storage->openReadStreams($this->file) as $name => $stream) {
Image.php:                'content' => $this->scaleImage($stream),
Image.php:        $imagick->readImageFile($stream);
Image.php:        if ($this->format !== null) {
Image.php:            $imagick->setFormat($this->format);
Image.php:        if ($this->max_width !== 0 || $this->max_height !== 0) {
Image.php:            $imagick->scaleImage($this->max_width, $this->max_height, true);
Image.php:        return $imagick->getImageBlob();
Json/Exception/ArrayExpected.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Json/Exception/ArrayExpected.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Json/Exception/InvalidJson.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Json/Exception/InvalidJson.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Json.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Json.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Json.php:            $this->flush = true;
Json.php:        if ($this->type === EndpointInterface::TYPE_DESTINATION) {
Json.php:            $streams = [$this->file => $this->storage->openWriteStream($this->file)];
Json.php:            $streams = $this->storage->openReadStreams($this->file);
Json.php:                throw new JsonException\InvalidJson('failed decode json '.$this->file.', json error '.$err);
Json.php:            $this->resource[] = [
Json.php:        foreach ($this->resource as $resource) {
Json.php:            if ($simulate === false && $this->type === EndpointInterface::TYPE_DESTINATION) {
Json.php:                $this->storage->syncWriteStream($resource['stream'], $resource['path']);
Json.php:        $this->resource = [];
Json.php:        foreach ($this->filter_all as $attr => $value) {
Json.php:                $filtered[$attr] = array_values($value->children());
Json.php:        foreach ($this->resource as $resource_key => $json) {
Json.php:                    $this->logger->debug('json object does not match filter [{filter}], skip it', [
Json.php:        foreach ($this->resource as $resource_key => $xml) {
Json.php:            $this->resource[$resource_key]['content'][] = $object;
Json.php:            $this->logger->debug('create new json object on endpoint ['.$this->name.'] with values [{values}]', [
Json.php:        $filter = $this->getFilterOne($object);
Json.php:        foreach ($this->resource as $json) {
Ldap/Exception/NoEntryDn.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Ldap/Exception/NoEntryDn.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Ldap.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Ldap.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Ldap.php:        $this->filter_all = '(objectClass=*)';
Ldap.php:        $this->ldap = $ldap;
Ldap.php:        $this->setLdapOptions($ldap_options);
Ldap.php:        $this->logger->debug('connect to ldap server ['.$this->uri.']', [
Ldap.php:        if (null === $this->binddn) {
Ldap.php:            $this->logger->warning('no binddn set for ldap connection, you should avoid anonymous bind', [
Ldap.php:        if (false === $this->tls && 'ldaps' !== substr($this->uri, 0, 5)) {
Ldap.php:            $this->logger->warning('neither tls nor ldaps enabled for ldap connection, it is strongly reccommended to encrypt ldap connections', [
Ldap.php:        $this->ldap->connect($this->uri);
Ldap.php:        foreach ($this->options as $opt => $value) {
Ldap.php:            $this->ldap->setOption(constant($opt), $value);
Ldap.php:        if (true === $this->tls) {
Ldap.php:            $this->ldap->startTls();
Ldap.php:        $this->logger->info('bind to ldap server ['.$this->uri.'] with binddn ['.$this->binddn.']', [
Ldap.php:        $this->ldap->bind($this->binddn, $this->bindpw);
Ldap.php:                    $this->options = $value;
Ldap.php:                    $this->{$option} = (string) $value;
Ldap.php:                    $this->tls = (bool) $value;
Ldap.php:        $this->ldap->close();
Ldap.php:        $dn = $this->getDn($object, $endpoint_object);
Ldap.php:        $this->logger->info('update ldap object ['.$dn.'] on endpoint ['.$this->getIdentifier().'] with attributes [{attributes}]', [
Ldap.php:            $this->moveLdapObject($dn, $endpoint_object['entrydn'], $simulate);
Ldap.php:            $this->ldap->modifyBatch($dn, $diff);
Ldap.php:        $dn = $this->getDn($object, $endpoint_object);
Ldap.php:        $this->logger->debug('delete ldap object ['.$dn.']', [
Ldap.php:            $this->ldap->delete($dn);
Ldap.php:        $dn = $this->getDn($object);
Ldap.php:        $this->logger->info('create new ldap object ['.$dn.'] on endpoint ['.$this->getIdentifier().'] with attributes [{attributes}]', [
Ldap.php:            $this->ldap->add($dn, $object);
Ldap.php:        $filter = $this->filter_all;
Ldap.php:        $this->logger->debug('find all ldap objects with ldap filter ['.$filter.'] on endpoint ['.$this->name.']', [
Ldap.php:        $result = $this->ldap->ldapSearch($this->basedn, $filter);
Ldap.php:        foreach ($result->getEntries() as $object) {
Ldap.php:        $filter = $this->getFilterOne($object);
Ldap.php:        $this->logger->debug('find ldap object with ldap filter ['.$filter.'] in ['.$this->basedn.'] on endpoint ['.$this->getIdentifier().']', [
Ldap.php:        $result = $this->ldap->ldapSearch($this->basedn, $filter, $attributes);
Ldap.php:        $count = $result->countEntries();
Ldap.php:        return $this->prepareRawObject($result->getEntries()[0]);
Ldap.php:        $this->logger->info('found object ['.$current_dn.'] but is not at the expected place ['.$new_dn.'], move object', [
Ldap.php:            $this->ldap->rename($current_dn, $rdn, $parent_dn, true);
Mongodb.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Mongodb.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Mongodb.php:        $this->collection = $collection;
Mongodb.php:        return $this->get($object, $attributes);
Mongodb.php:            $this->get($object);
Mongodb.php:        $filter = $this->buildFilterAll((array) $filter['$match']);
Mongodb.php:        foreach ($this->collection->find($filter) as $data) {
Mongodb.php:        $this->logger->debug('create new mongodb object on endpoint ['.$this->name.'] with values [{values}]', [
Mongodb.php:            return (string) $this->collection->insertOne($object);
Mongodb.php:        $filter = $this->getFilterOne($object);
Mongodb.php:        $this->logger->info('update mongodb object on endpoint ['.$this->getIdentifier().']', [
Mongodb.php:            $this->collection->updateOne($filter, $diff);
Mongodb.php:        $filter = $this->getFilterOne($object);
Mongodb.php:        $this->logger->info('delete mongodb object on endpoint ['.$this->name.'] with filter ['.json_encode($filter).']', [
Mongodb.php:            $this->collection->deleteOne($filter);
Mongodb.php:        $filter = $this->getFilterOne($object);
Mongodb.php:        foreach ($this->collection->find($filter) as $data) {
Mongodb.php:        if ($filter !== null && $this->filter_all !== null) {
Mongodb.php:            return array_merge($filter, $this->filter_all);
Mongodb.php:        if ($this->filter_all !== null) {
Mongodb.php:            return $this->filter_all;
Moodle/ApiClient.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle/ApiClient.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle/ApiClient.php:        $this->setOptions($config);
Moodle/ApiClient.php:        $this->logger = $logger;
Moodle/ApiClient.php:                    $this->uri = (string) $value;
Moodle/ApiClient.php:                    $this->token = (string) $value;
Moodle/ApiClient.php:                    $this->username = (string) $value;
Moodle/ApiClient.php:                    $this->password = (string) $value;
Moodle/ApiClient.php:                    $this->tls = (bool) $value;
Moodle/ApiClient.php:                        $this->curl_options[$name] = $opt['value'];
Moodle/ApiClient.php:        $url = $this->uri.
Moodle/ApiClient.php:            '/webservice/rest/server.php?wstoken='.$this->token.
Moodle/ApiClient.php:            '&moodlewsrestformat='.$this->moodle_response_format.'&'.
Moodle/ApiClient.php:        $this->logger->info('execute curl request ['.$url.']', [
Moodle/ApiClient.php:        foreach ($this->curl_options as $opt => $value) {
Moodle/ApiClient.php:        if ($body instanceof stdClass && isset($body->exception)) {
Moodle/ApiClient.php:            if (isset($body->debuginfo)) {
Moodle/ApiClient.php:                $this->logger->debug($body->debuginfo, [
Moodle/ApiClient.php:            throw new Exception\FailedProcessRequest('moodle api request failed with exception '.$body->message);
Moodle/Exception/InvalidApiResponse.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle/Exception/InvalidApiResponse.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle/Exception/NoResourceId.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle/Exception/NoResourceId.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle/Exception/FailedProcessRequest.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle/Exception/FailedProcessRequest.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle/Exception/ApiRequestFailed.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle/Exception/ApiRequestFailed.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Moodle.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Moodle.php:        $this->moodle = $wrapper;
Moodle.php:        $this->resource_type = $resource_type;
Moodle.php:        $id = $this->getId($endpoint_object);
Moodle.php:        foreach ($map->getMap() as $attr => $value) {
Moodle.php:        $id = $this->getId($endpoint_object);
Moodle.php:        $this->logger->info('update moodle object ['.$id.'] on endpoint ['.$this->getIdentifier().']', [
Moodle.php:            $identifier = isset(self::METHODS[$this->resource_type]['change']['identifier']) ? self::METHODS[$this->resource_type]['change']['identifier'] : '';
Moodle.php:            $this->moodle->restCall($diff, self::METHODS[$this->resource_type]['change']['function']);
Moodle.php:        $identifier = isset(self::METHODS[$this->resource_type]['create']['identifier']) ? self::METHODS[$this->resource_type]['create']['identifier'] : '';
Moodle.php:        $this->logger->info('create new moodle object on endpoint ['.$this->getIdentifier().'] with attributes [{attributes}]', [
Moodle.php:            $this->moodle->restCall($prepared_data, self::METHODS[$this->resource_type]['create']['function']);
Moodle.php:        $id = $this->getId($endpoint_object);
Moodle.php:        $this->logger->info('delete existing moodle object ['.$id.'] on endpoint ['.$this->getIdentifier().']', [
Moodle.php:            $identifier = isset(self::METHODS[$this->resource_type]['delete']['identifier']) ? self::METHODS[$this->resource_type]['delete']['identifier'] : '';
Moodle.php:            $this->moodle->restCall($diff, self::METHODS[$this->resource_type]['delete']['function']);
Moodle.php:        $this->logger->debug('find all moodle objects with moodle filter ['.$this->filter_all.'] on endpoint ['.$this->getIdentifier().']', [
Moodle.php:        $result = $this->moodle->restCall('&'.$this->filter_all, self::METHODS[$this->resource_type]['get_all']['function']);
Moodle.php:        $filter = $this->getFilterOne($object);
Moodle.php:        $this->logger->debug('find moodle object with moodle filter ['.$filter.'] on endpoint ['.$this->getIdentifier().']', [
Moodle.php:        $result = $this->moodle->restCall('&'.$filter, self::METHODS[$this->resource_type]['get']['function']);
Mysql/Exception/InvalidQuery.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Mysql/Exception/InvalidQuery.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Mysql/Wrapper.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Mysql/Wrapper.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Mysql/Wrapper.php:        $this->logger = $logger;
Mysql/Wrapper.php:        $this->mysqli = $mysqli;
Mysql/Wrapper.php:        return call_user_func_array([&$this->mysqli, $method], $arguments);
Mysql/Wrapper.php:        return $this->mysqli;
Mysql/Wrapper.php:        $this->logger->debug('execute sql query ['.$query.']', [
Mysql/Wrapper.php:        $link = $this->getResource();
Mysql/Wrapper.php:        $result = $link->query($query);
Mysql/Wrapper.php:            throw new Exception\InvalidQuery('failed to execute sql query with error '.$link->error.' ('.$link->errno.')');
Mysql/Wrapper.php:        $this->logger->debug('execute sql query ['.$query.']', [
Mysql/Wrapper.php:        $link = $this->getResource();
Mysql/Wrapper.php:        $result = $link->query($query);
Mysql/Wrapper.php:            throw new Exception\InvalidQuery('failed to execute sql query with error '.$link->error.' ('.$link->errno.')');
Mysql/Wrapper.php:        $this->logger->debug('prepare and execute sql query ['.$query.'] with values [{values}]', [
Mysql/Wrapper.php:        $link = $this->getResource();
Mysql/Wrapper.php:        $stmt = $link->prepare($query);
Mysql/Wrapper.php:            throw new Exception\InvalidQuery('failed to prepare sql query with error '.$link->error.' ('.$link->errno.')');
Mysql/Wrapper.php:        $stmt->bind_param($types, ...$values);
Mysql/Wrapper.php:        $stmt->execute();
Mysql/Wrapper.php:        if ($stmt->error) {
Mysql/Wrapper.php:            throw new Exception\InvalidQuery($stmt->error);
Mysql.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Mysql.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Mysql.php:        $this->resource = $mysqli;
Mysql.php:        $this->table = $table;
Mysql.php:        $this->resource->connect();
Mysql.php:        $this->resource->close();
Mysql.php:        $filter = $this->buildFilterAll($filter);
Mysql.php:            $sql = 'SELECT * FROM '.$this->table;
Mysql.php:            $sql = 'SELECT * FROM '.$this->table.' WHERE '.$filter;
Mysql.php:        $result = $this->resource->select($sql);
Mysql.php:        while ($row = $result->fetch_assoc()) {
Mysql.php:        $filter = $this->getFilterOne($object);
Mysql.php:        $sql = 'SELECT * FROM '.$this->table.' WHERE '.$filter;
Mysql.php:        $result = $this->resource->select($sql);
Mysql.php:        if ($result->num_rows > 1) {
Mysql.php:        if ($result->num_rows === 0) {
Mysql.php:        return $result->fetch_assoc();
Mysql.php:        $result = $this->prepareCreate($object, $simulate);
Mysql.php:        return (string) $result->insert_id;
Pdo/Exception/InvalidQuery.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Pdo/Exception/InvalidQuery.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Pdo/Wrapper.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Pdo/Wrapper.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Pdo/Wrapper.php:        $this->logger = $logger;
Pdo/Wrapper.php:        $this->pdo = $pdo;
Pdo/Wrapper.php:        return call_user_func_array([&$this->pdo, $method], $arguments);
Pdo/Wrapper.php:        return $this->pdo;
Pdo/Wrapper.php:        $this->logger->debug('execute sql query ['.$query.']', [
Pdo/Wrapper.php:        $link = $this->getResource();
Pdo/Wrapper.php:        $result = $link->query($query);
Pdo/Wrapper.php:            throw new Exception\InvalidQuery('failed to execute sql query with error '.$link->errorInfo()[2].' ('.$link->errorCode().')');
Pdo/Wrapper.php:        $this->logger->debug('execute sql query ['.$query.']', [
Pdo/Wrapper.php:        $link = $this->getResource();
Pdo/Wrapper.php:        $result = $link->exec($query);
Pdo/Wrapper.php:            throw new Exception\InvalidQuery('failed to execute sql query with error '.$link->errorInfo().' ('.$link->errorCode().')');
Pdo/Wrapper.php:        $this->logger->debug('sql query affected ['.$result.'] rows', [
Pdo/Wrapper.php:        $this->logger->debug('prepare and execute pdo query ['.$query.'] with values [{values}]', [
Pdo/Wrapper.php:        $link = $this->getResource();
Pdo/Wrapper.php:        $stmt = $link->prepare($query);
Pdo/Wrapper.php:            throw new Exception\InvalidQuery('failed to prepare pdo query with error '.$link->error.' ('.$link->errno.')');
Pdo/Wrapper.php:        $stmt->bind_param($types, ...$values);
Pdo/Wrapper.php:        $stmt->execute();
Pdo.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Pdo.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Pdo.php:        $this->resource = $pdo;
Pdo.php:        $this->table = $table;
Pdo.php:        $filter = $this->buildFilterAll($filter);
Pdo.php:            $sql = 'SELECT * FROM '.$this->table;
Pdo.php:            $sql = 'SELECT * FROM '.$this->table.' WHERE '.$filter;
Pdo.php:        $result = $this->resource->select($sql);
Pdo.php:        while ($row = $result->fetch(\PDO::FETCH_ASSOC)) {
Pdo.php:        $filter = $this->getFilterOne($object);
Pdo.php:        $sql = 'SELECT * FROM '.$this->table.' WHERE '.$filter;
Pdo.php:        $result = $this->resource->select($sql);
Pdo.php:        if ($result->num_rows > 1) {
Pdo.php:        if ($result->num_rows === 0) {
Pdo.php:        return $result->fetch_assoc();
Pdo.php:        $result = $this->prepareCreate($object, $simulate);
Pdo.php:        return $this->resource->getResouce()->lastInsertId();
Validator.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Validator.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Xml/Exception/InvalidXml.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Xml/Exception/InvalidXml.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Xml.php: * @copyright   Copryright (c) 2017-2018 gyselroth GmbH (https://gyselroth.com)
Xml.php: * @license     GPL-3.0 https://opensource.org/licenses/GPL-3.0
Xml.php:        $this->setXmlOptions($xml_options);
Xml.php:        if ($this->type === EndpointInterface::TYPE_DESTINATION) {
Xml.php:            $streams = [$this->file => $this->storage->openWriteStream($this->file)];
Xml.php:            $streams = $this->storage->openReadStreams($this->file);
Xml.php:            $dom = new DOMDocument('1.0', 'UTF-8');
Xml.php:            $dom->formatOutput = $this->pretty;
Xml.php:            $dom->preserveWhiteSpace = $this->preserve_whitespace;
Xml.php:            //read stream into memory since xml operates in-memory
Xml.php:            if ($this->type === EndpointInterface::TYPE_DESTINATION && empty($content)) {
Xml.php:                $xml_root = $dom->createElement($this->root_name);
Xml.php:                $xml_root = $dom->appendChild($xml_root);
Xml.php:                $this->logger->debug('decode xml stream from ['.$path.']', [
Xml.php:                if ($dom->loadXML($content) === false) {
Xml.php:                $xml_root = $dom->documentElement;
Xml.php:                if (!$xml_root->hasChildNodes()) {
Xml.php:                    $level = $this->type === EndpointInterface::TYPE_SOURCE ? 'warning' : 'debug';
Xml.php:                    $this->logger->$level('empty xml file ['.$path.'] given', [
Xml.php:            $this->resource[] = [
Xml.php:                    $this->{$option} = (string) $value;
Xml.php:                    $this->{$option} = (bool) $value;
Xml.php:        foreach ($this->resource as $resource) {
Xml.php:            if ($simulate === false && $this->type === EndpointInterface::TYPE_DESTINATION) {
Xml.php:                $this->flush($simulate);
Xml.php:                if (fwrite($resource['stream'], $resource['dom']->saveXML()) === false) {
Xml.php:                $this->storage->syncWriteStream($resource['stream'], $resource['path']);
Xml.php:        $this->resource = [];
Xml.php:        foreach ($this->filter_all as $attr => $value) {
Xml.php:                $filtered[$attr] = array_values($value->children());
Xml.php:        foreach ($this->resource as $xml) {
Xml.php:            $data = json_decode(json_encode((array) $xml['xml_element']), true)[$this->node_name];
Xml.php:                        $this->logger->debug('data does not match filter [{filter}], skip it', [
Xml.php:        $xml = $this->resource[0];
Xml.php:        $current_track = $xml['dom']->createElement($this->node_name);
Xml.php:        $current_track = $xml['xml_root']->appendChild($current_track);
Xml.php:                $attr_subnode = $current_track->appendChild($xml['dom']->createElement($column));
Xml.php:                    $attr_subnode->appendChild($xml['dom']->createElement($column, $val));
Xml.php:                $current_track->appendChild($xml['dom']->createElement($column, $value));
Xml.php:        $this->logger->debug('create new xml object on endpoint ['.$this->name.'] with values [{values}]', [
Xml.php:        $xml = $this->resource[0];
Xml.php:        $filter = $this->getFilterOne($object);
Xml.php:        $node = $xpath->query($filter);
Xml.php:            $child = $this->getChildNode($node, $attribute);
Xml.php:                        $new = $xml['dom']->createElement($attribute);
Xml.php:                            $new->appendChild($xml['dom']->createElement($attribute, $val));
Xml.php:                        $new = $xml['dom']->createElement($attribute, $update['value']);
Xml.php:                    $node->replaceChild($new, $child);
Xml.php:                    $node->removeChild($child);
Xml.php:                    $child->appendChild($xml['dom']->createElement($attribute, $update['value']));
Xml.php:        $xml = $this->resource[0];
Xml.php:        $filter = $this->getFilterOne($object);
Xml.php:        $node = $xpath->query($filter);
Xml.php:        $xml['xml_root']->removeChild($node);
Xml.php:        foreach ($this->resource as $xml) {
Xml.php:            $filter = $this->getFilterOne($object);
Xml.php:            $this->logger->debug('find xml node with xpath ['.$filter.'] in ['.$xml['path'].'] on endpoint ['.$this->getIdentifier().']', [
Xml.php:                $elements = $xml['xml_element']->xpath($filter);
Xml.php:        foreach ($node->childNodes as $child) {
Xml.php:            if ($child->nodeName === $name) {
